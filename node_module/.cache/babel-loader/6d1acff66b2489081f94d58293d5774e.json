{"ast":null,"code":"import _slicedToArray from \"C:/Users/Bhargav Ayare/Documents/GitHub/invoice2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Bhargav Ayare\\\\Documents\\\\GitHub\\\\invoice2\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { getMimeType, isDataUrl, makeDataUrl, resolveUrl } from './util';\nvar URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nvar URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"'])([^\"']+)\\1\\)/g;\nvar FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nexport function toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  var escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(\"(url\\\\(['\\\"]?)(\".concat(escaped, \")(['\\\"]?\\\\))\"), 'g');\n}\nexport function parseURLs(cssText) {\n  var result = [];\n  cssText.replace(URL_REGEX, function (raw, quotation, url) {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(function (url) {\n    return !isDataUrl(url);\n  });\n}\nexport function embed(cssText, resourceURL, baseURL, options, get) {\n  var resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(function (url) {\n    return get ? get(url) : getBlobFromURL(url, options);\n  }).then(function (data) {\n    if (typeof data === 'string') {\n      return makeDataUrl(data, getMimeType(resourceURL));\n    }\n\n    return makeDataUrl(data.blob, getMimeType(resourceURL) || data.contentType);\n  }).then(function (dataURL) {\n    return cssText.replace(toRegex(resourceURL), \"$1\".concat(dataURL, \"$3\"));\n  }).then(function (content) {\n    return content;\n  }, function () {\n    return resolvedURL;\n  });\n}\n\nfunction filterPreferredFontFormat(str, _ref) {\n  var preferredFontFormat = _ref.preferredFontFormat;\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, function (match) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var _ref2 = URL_WITH_FORMAT_REGEX.exec(match) || [],\n          _ref3 = _slicedToArray(_ref2, 3),\n          src = _ref3[0],\n          format = _ref3[2];\n\n      if (!format) {\n        return '';\n      }\n\n      if (format === preferredFontFormat) {\n        return \"src: \".concat(src, \";\");\n      }\n    }\n  });\n}\n\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport function embedResources(cssText, baseUrl, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var filteredCSSText;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (shouldEmbed(cssText)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.resolve(cssText));\n\n          case 2:\n            filteredCSSText = filterPreferredFontFormat(cssText, options);\n            return _context.abrupt(\"return\", Promise.resolve(filteredCSSText).then(parseURLs).then(function (urls) {\n              return urls.reduce(function (deferred, url) {\n                return (// eslint-disable-next-line promise/no-nesting\n                  deferred.then(function (css) {\n                    return embed(css, url, baseUrl, options);\n                  })\n                );\n              }, Promise.resolve(filteredCSSText));\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"mappings":"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","names":["getBlobFromURL","getMimeType","isDataUrl","makeDataUrl","resolveUrl","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","replace","RegExp","parseURLs","cssText","result","raw","quotation","push","filter","embed","resourceURL","baseURL","options","get","resolvedURL","Promise","resolve","then","data","blob","contentType","dataURL","content","filterPreferredFontFormat","str","preferredFontFormat","match","exec","src","format","shouldEmbed","search","embedResources","baseUrl","filteredCSSText","urls","reduce","deferred","css"],"sources":["../src/embedResources.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}